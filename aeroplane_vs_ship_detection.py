# -*- coding: utf-8 -*-
"""Aeroplane vs Ship Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1N-VXK3IRIJU4CjihXVBnj9Z2iKvNSThR
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install -q tf-models-official
!pip install -q tf_slim

"""I am First selecting TF1 for generating tfrecords because the script that generates tfrecords is written in TF1."""

# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 1.x
import tensorflow
print(tensorflow.__version__)

!nvidia-smi

"""##Setup"""

!git clone https://github.com/tensorflow/models.git

# Commented out IPython magic to ensure Python compatibility.
# %cd "/content/models/research"

!protoc object_detection/protos/*.proto --python_out=.

!python -m pip install --upgrade pip

"""I am only setting up TF1 enviroment first to generate tfrecords because generate_tfrecord.py is written in tf1."""

!cp object_detection/packages/tf1/setup.py .
!python -m pip install --use-feature=2020-resolver .

# Test the installation.
!python object_detection/builders/model_builder_tf1_test.py

"""##Training and Configrations"""

# Commented out IPython magic to ensure Python compatibility.
# %cd /content

!unzip "/content/drive/MyDrive/object-detection.zip"

# Commented out IPython magic to ensure Python compatibility.
# %cd "/content/object-detection"

!python generate_tfrecord.py --csv_input=data/train_labels.csv  --output_path=data/train.record --image_dir=images/train/

!python generate_tfrecord.py --csv_input=data/test_labels.csv  --output_path=data/test.record --image_dir=images/test/

!cp "/content/object-detection/data/test.record" "/content/drive/MyDrive/data"
!cp "/content/object-detection/data/train.record" "/content/drive/MyDrive/data"

"""##Model And Configrations"""

# Commented out IPython magic to ensure Python compatibility.
# %cd /content

!wget "http://download.tensorflow.org/models/object_detection/tf2/20200711/ssd_resnet101_v1_fpn_640x640_coco17_tpu-8.tar.gz"

!unzip /content/drive/MyDrive/object-detection.zip

!tar -xvf "/content/ssd_resnet101_v1_fpn_640x640_coco17_tpu-8.tar.gz"

!cp -r "/content/ssd_resnet101_v1_fpn_640x640_coco17_tpu-8" "/content/content/object-detection"

!rm -rf *.tar.gz

# Commented out IPython magic to ensure Python compatibility.
# %cd /content

!tar -xvf /content/object-detection/faster_rcnn_resnet50_v1_640x640_coco17_tpu-8.tar.gz

!cp -R "/content/faster_rcnn_resnet50_v1_640x640_coco17_tpu-8" "/content/object-detection"

!cp "/content/object-detection/training/faster_rcnn_resnet101_v1_640x640_coco17_tpu-8.config" "/content/drive/MyDrive/data"
!cp "/content/object-detection/training/object-detection.pbtxt" "/content/drive/MyDrive/data"

!cp -r "/content/object-detection" "/content/drive/MyDrive"

"""Now its time to setup TF2 for object detection for model training."""

# Commented out IPython magic to ensure Python compatibility.
# %cd "/content/models/research"

!protoc object_detection/protos/*.proto --python_out=.

!python -m pip install --upgrade pip 

!cp object_detection/packages/tf2/setup.py .
!python -m pip install --use-feature=2020-resolver .

# Test the installation.
!python object_detection/builders/model_builder_tf2_test.py

"""##Copying Our Setup Folder to Place inside models"""

!cp -R "/content/drive/MyDrive/object-detection" "/content/"

!cp -r "/content/content/object-detection/data" "/content/models/research/object_detection"
!cp -r "/content/content/object-detection/images" "/content/models/research/object_detection"
!cp -r "/content/content/object-detection/ssd_resnet101_v1_fpn_640x640_coco17_tpu-8" "/content/models/research/object_detection"
!cp -r "/content/content/object-detection/training" "/content/models/research/object_detection"
!cp "/content/content/object-detection/training/ssd_resnet101_v1_fpn_640x640_coco17_tpu-8.config" "/content/models/research/object_detection"

# Commented out IPython magic to ensure Python compatibility.
# %cd "/content/models/research/object_detection"

!cp "/content/object-detection/training/faster_rcnn_resnet101_v1_640x640_coco17_tpu-8.config" "/content/models/research/object_detection/training"

# Commented out IPython magic to ensure Python compatibility.
# %cd "/content/models/research/"
!export PYTHONPATH=$PYTHONPATH:`pwd`:`pwd`/slim

# Commented out IPython magic to ensure Python compatibility.
# %cd "/content/models/research/object_detection"
!pwd

"""It gives error so change batch size to 4."""

!python model_main_tf2.py --model_dir=ssd_resnet101_v1_fpn_640x640_coco17_tpu-8 --pipeline_config_path=training/ssd_resnet101_v1_fpn_640x640_coco17_tpu-8.config

!cp -r "/content/models/research/object_detection/ssd_resnet101_v1_fpn_640x640_coco17_tpu-8" "/content/drive/MyDrive/fine_tuned_model"

#run conversion script
import re
import numpy as np

output_directory = '/content/models/research/object_detection/ssd_resnet101_v1_fpn_640x640_coco17_tpu-8'

#place the model weights you would like to export here
last_model_path = '/content/ssd_resnet101_v1_fpn_640x640_coco17_tpu-8'
pipeline_file = '/content/models/research/object_detection/training/ssd_resnet101_v1_fpn_640x640_coco17_tpu-8.config'
print(last_model_path)
!python /content/models/research/object_detection/exporter_main_v2.py \
    --trained_checkpoint_dir {last_model_path} \
    --output_directory {output_directory} \
    --pipeline_config_path {pipeline_file}

# Commented out IPython magic to ensure Python compatibility.
import matplotlib
import matplotlib.pyplot as plt

import io
import scipy.misc
import numpy as np
from six import BytesIO
from PIL import Image, ImageDraw, ImageFont

import tensorflow as tf

from object_detection.utils import label_map_util
from object_detection.utils import config_util
from object_detection.utils import visualization_utils as viz_utils
from object_detection.builders import model_builder

# %matplotlib inline

import pathlib
import os

filenames = list(pathlib.Path('/content/models/research/object_detection/ssd_resnet101_v1_fpn_640x640_coco17_tpu-8').glob('*.index'))

filenames.sort()
print(filenames)

#recover our saved model
pipeline_config = pipeline_file
#generally you want to put the last ckpt from training in here
model_dir = str(filenames[-1]).replace('.index','')
configs = config_util.get_configs_from_pipeline_file(pipeline_config)
model_config = configs['model']
detection_model = model_builder.build(
      model_config=model_config, is_training=False)

# Restore checkpoint
ckpt = tf.compat.v2.train.Checkpoint(
      model=detection_model)
ckpt.restore(os.path.join(str(filenames[-1]).replace('.index','')))


def get_model_detection_function(model):
  """Get a tf.function for detection."""

  @tf.function
  def detect_fn(image):
    """Detect objects in image."""

    image, shapes = model.preprocess(image)
    prediction_dict = model.predict(image, shapes)
    detections = model.postprocess(prediction_dict, shapes)

    return detections, prediction_dict, tf.reshape(shapes, [-1])

  return detect_fn

detect_fn = get_model_detection_function(detection_model)

PATH_TO_LABELS = "/content/content/object-detection/training/object-detection.pbtxt"
category_index = label_map_util.create_category_index_from_labelmap(PATH_TO_LABELS,
                                                                    use_display_name=True)

def load_image_into_numpy_array(path):
    """Load an image from file into a numpy array.

    Puts image into numpy array to feed into tensorflow graph.
    Note that by convention we put it into a numpy array with shape
    (height, width, channels), where channels=3 for RGB.

    Args:
      path: the file path to the image

    Returns:
      uint8 numpy array with shape (img_height, img_width, 3)
    """
    return np.array(Image.open(path).convert('RGB'))

from google.colab.patches import cv2_imshow

# Commented out IPython magic to ensure Python compatibility.
# %cd /content

import random
import glob

TEST_IMAGE_PATHS = glob.glob('/content/content/object-detection/images/test/*.jpg')

for image_path in TEST_IMAGE_PATHS:
  image_np = load_image_into_numpy_array(image_path)
  input_tensor = tf.convert_to_tensor(
      np.expand_dims(image_np, 0), dtype=tf.float32)
  detections, predictions_dict, shapes = detect_fn(input_tensor)

  label_id_offset = 1
  image_np_with_detections = image_np.copy()

  viz_utils.visualize_boxes_and_labels_on_image_array(
        image_np_with_detections,
        detections['detection_boxes'][0].numpy(),
        (detections['detection_classes'][0].numpy() + label_id_offset).astype(int),
        detections['detection_scores'][0].numpy(),
        category_index,
        use_normalized_coordinates=True,
        max_boxes_to_draw=200,
        min_score_thresh=.5,
        agnostic_mode=False,
  )

  cv2_imshow(image_np_with_detections)

# !zip -r object-detection.zip "/content/object-detection"